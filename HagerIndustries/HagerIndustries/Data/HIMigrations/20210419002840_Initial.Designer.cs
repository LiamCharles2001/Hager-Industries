// <auto-generated />
using System;
using HagerIndustries.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HagerIndustries.Data.HIMigrations
{
    [DbContext(typeof(HagerIndustriesContext))]
    [Migration("20210419002840_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("HI")
                .HasAnnotation("ProductVersion", "3.1.13");

            modelBuilder.Entity("HagerIndustries.Models.Announcement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("HagerIndustries.Models.BillingTerm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TermDetails")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("TermName")
                        .IsUnique();

                    b.ToTable("BillingTerms");
                });

            modelBuilder.Entity("HagerIndustries.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HagerIndustries.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID", "cityName")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HagerIndustries.Models.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddressOne")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("BillingAddressTwo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int?>("BillingCityID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BillingCountryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingPostal")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("BillingProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BillingTermID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompLocation")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("CompPhone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompWebsite")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("CreditCheck")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreditCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsContractor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVendor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("PrimaryCompID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddressOne")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ShippingAddressTwo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int?>("ShippingCityID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShippingCountryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingPostal")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("ShippingProvinceID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("BillingCityID");

                    b.HasIndex("BillingCountryID");

                    b.HasIndex("BillingProvinceID");

                    b.HasIndex("BillingTermID");

                    b.HasIndex("CompName")
                        .IsUnique();

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ShippingCityID");

                    b.HasIndex("ShippingCountryID");

                    b.HasIndex("ShippingProvinceID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("HagerIndustries.Models.CompanyContractor", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyID", "ContractorID");

                    b.HasIndex("ContractorID");

                    b.ToTable("CompanyContractors");
                });

            modelBuilder.Entity("HagerIndustries.Models.CompanyCustomer", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyID", "CustomerID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CompanyCustomers");
                });

            modelBuilder.Entity("HagerIndustries.Models.CompanyVendor", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyID", "VendorID");

                    b.HasIndex("VendorID");

                    b.ToTable("CompanyVendors");
                });

            modelBuilder.Entity("HagerIndustries.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CellPhone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<long?>("WorkPhone")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactCategory", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ContactCategories");
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactContractor", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactID", "ContractorID");

                    b.HasIndex("ContractorID");

                    b.ToTable("ContactContractors");
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactCustomer", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactID", "CustomerID");

                    b.HasIndex("CustomerID");

                    b.ToTable("ContactCustomers");
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactVendor", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactID", "VendorID");

                    b.HasIndex("VendorID");

                    b.ToTable("ContactVendors");
                });

            modelBuilder.Entity("HagerIndustries.Models.Contractor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractDescription")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("ContractName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("HagerIndustries.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("countryPostalFormat")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("countryName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("HagerIndustries.Models.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyName")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("HagerIndustries.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerDescription")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("HagerIndustries.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressOne")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("AddressTwo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<long?>("CellPhone")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<long?>("EmergencyContactPhone")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmploymentID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Expense")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("HomePhone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyFobNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int?>("PositionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Postal")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Wage")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmploymentID");

                    b.HasIndex("KeyFobNumber")
                        .IsUnique();

                    b.HasIndex("PositionID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HagerIndustries.Models.EmployeeSkill", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeID", "SkillID");

                    b.HasIndex("SkillID");

                    b.ToTable("EmployeeSkills");
                });

            modelBuilder.Entity("HagerIndustries.Models.Employment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmplType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("EmplType")
                        .IsUnique();

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("HagerIndustries.Models.Event", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("End")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HagerIndustries.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PosName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PosName")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("HagerIndustries.Models.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("provName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CountryID", "provName")
                        .IsUnique();

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("HagerIndustries.Models.Skill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SkillName")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("HagerIndustries.Models.Vendor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VendorDescription")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("VendorName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("HagerIndustries.Models.City", b =>
                {
                    b.HasOne("HagerIndustries.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.Company", b =>
                {
                    b.HasOne("HagerIndustries.Models.City", "BillingCity")
                        .WithMany()
                        .HasForeignKey("BillingCityID");

                    b.HasOne("HagerIndustries.Models.Country", "BillingCountry")
                        .WithMany("BillingCompanies")
                        .HasForeignKey("BillingCountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.Province", "BillingProvince")
                        .WithMany("BillingCompanies")
                        .HasForeignKey("BillingProvinceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.BillingTerm", "BillingTerm")
                        .WithMany("Companies")
                        .HasForeignKey("BillingTermID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.Currency", "Currency")
                        .WithMany("Companies")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.City", "ShippingCity")
                        .WithMany()
                        .HasForeignKey("ShippingCityID");

                    b.HasOne("HagerIndustries.Models.Country", "ShippingCountry")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("ShippingCountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.Province", "ShippingProvince")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("ShippingProvinceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HagerIndustries.Models.CompanyContractor", b =>
                {
                    b.HasOne("HagerIndustries.Models.Company", "Company")
                        .WithMany("CompanyContractors")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Contractor", "Contractor")
                        .WithMany("CompanyContractors")
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.CompanyCustomer", b =>
                {
                    b.HasOne("HagerIndustries.Models.Company", "Company")
                        .WithMany("CompanyCustomers")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Customer", "Customer")
                        .WithMany("CompanyCustomers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.CompanyVendor", b =>
                {
                    b.HasOne("HagerIndustries.Models.Company", "Company")
                        .WithMany("CompanyVendors")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Vendor", "Vendor")
                        .WithMany("CompanyVendors")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.Contact", b =>
                {
                    b.HasOne("HagerIndustries.Models.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactCategory", b =>
                {
                    b.HasOne("HagerIndustries.Models.Category", "Category")
                        .WithMany("ContactCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Contact", "Contact")
                        .WithMany("ContactCategories")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactContractor", b =>
                {
                    b.HasOne("HagerIndustries.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactCustomer", b =>
                {
                    b.HasOne("HagerIndustries.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.ContactVendor", b =>
                {
                    b.HasOne("HagerIndustries.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.Employee", b =>
                {
                    b.HasOne("HagerIndustries.Models.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.Employment", "Employment")
                        .WithMany("Employees")
                        .HasForeignKey("EmploymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HagerIndustries.Models.Province", "Province")
                        .WithMany("Employees")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HagerIndustries.Models.EmployeeSkill", b =>
                {
                    b.HasOne("HagerIndustries.Models.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HagerIndustries.Models.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HagerIndustries.Models.Province", b =>
                {
                    b.HasOne("HagerIndustries.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
